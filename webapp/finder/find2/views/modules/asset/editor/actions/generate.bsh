import org.apache.commons.logging.*;

import org.openedit.store.*;
import org.openedit.data.*;
import org.openedit.page.manage.*;
import org.openedit.page.*;
import org.openedit.util.*;
import org.openedit.repository.*;
import org.openedit.repository.filesystem.*;
import org.openedit.*;

String getSequenceNumber( String prefix, int width )
{
	store = context.getPageValue("store");
	// Search for sequence number
	storeSearch = moduleManager.getModule("StoreSearchModule"); 
	context.setRequestParameter("field", new String[] {"name"});
	context.setRequestParameter("operation", new String[] {"startswith"});
	context.setRequestParameter("name.value", prefix);
	
	storeSearch.fieldSearch(context);
	productSearcher = store.productSearcher;
	seq = context.getPageValue("hits").size();
	text = null;
	inuse = true;
	
	while (inuse)
	{
		seq++;
		formatter = new Formatter().format("%0" + width + "d", new Object[] {seq});
		text = formatter.toString();
		name = prefix + text;
		context.setRequestParameter("name.value", name);
		storeSearch.fieldSearch(context);
		inuse = (context.getPageValue("hits").size() > 0);
	}
	
	return text;
}

String getStatePostfix( String assetid )
{
	// Look for state restrictions
	store = context.getPageValue("store");
	statesSearcher = sm.getSearcher(store.catalogId, "productstates");
	statesHits = statesSearcher.fieldSearch("assetid", product.id);
	if( statesHits.size() == 1 )
	{
		return sm.getData(store.catalogId, "states", statesHits.iterator().next().get("stateid")).get("code");
	}
	return "";
}

log = LogFactory.getLog("generate.bsh");
store = context.getPageValue("store");
product = context.getPageValue("product");
sm = store.searcherManager;

if (product == null)
{
	log.error("No product loaded.");
	return;
}

oldSourcePath = product.sourcePath;
log.info("Generating item number for source path: " + oldSourcePath);

/* copied from CatalogEditModule.changeSourcePath */

String dataRoot = store.getStoreHome() + "/data";

log.debug("Getting product information...");

String mediatypeid = product.get("mediatype");
String mediatypevalue = (mediatypeid == null)? "": sm.getData( store.catalogId, "mediatype", mediatypeid ).toString();

String lobid = product.get("lob");
String lobvalue = (lobid == null)? "": sm.getData( store.catalogId, "lob", lobid ).toString();

String usedbyid = product.get("usedby");
String usedbyvalue = (usedbyid == null)? "": sm.getData( store.catalogId, "usedby", usedbyid ).toString();

String year = product.get("activationyear");
if( year == null )
{
	year = String.valueOf(GregorianCalendar.getInstance().get(Calendar.YEAR));
}

log.debug("Calculating item number...");
productname = "";

if( "Agent".equals(usedbyvalue) || "Zone".equals(usedbyvalue) || "AFO".equals(usedbyvalue) )
{
	lobnum = lobid;
	if ("true".equals(product.get("isrelatedsponsorship"))) lobnum = "7";
	
	productname = "P" + year.substring(2,4) + lobnum;
	productname += getSequenceNumber(productname, 3);
	productname += getStatePostfix(product.id);
}
else if ("Corporate".equals(usedbyvalue))
{
	if ("true".equals(product.get("isrelatedsponsorship")))
	{
		productname = "S";
	}
	else
	{
		productname = sm.getData( store.catalogId, "lob", lobid ).get("abbrv");
	}
	productname += year + "-";
	productname += getSequenceNumber(productname, 2);
	productname += getStatePostfix(product.id);
}
else
{
	productname += "X" + year + lobid;
	productname += getSequenceNumber(productname, 2);
	productname += getStatePostfix(product.id);
}

product.setName( productname );					
store.saveProduct(product);
context.redirect("/" + store.getCatalogId() + "/products/" + product.getSourcePath() +".html" );
